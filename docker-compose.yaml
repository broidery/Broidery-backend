version: "3.4"
# Names our volume
volumes:
  my-db:

services:
  mysql:
    container_name: mysql
    hostname: mysql
    image: mysql:5.7
    restart: always
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - 3306
    environment:
      MYSQL_DATABASE: 'Broidery-api-db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'broidery-user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'secreton'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'root-pasword'
      # Where our data will be persisted
    networks:
      - overlay
    volumes:
      - "./vol/1.init.sql:/docker-entrypoint-initdb.d/1.sql"
      - "./vol/2.addData.sql:/2.addData.sql"

  broidery-backend:
    depends_on:
      - mysql
    environment:
      - WAIT_HOSTS=mysql:3306
      - WAIT_HOSTS_TIMEOUT=300
      - WAIT_SLEEP_INTERVAL=30
      - WAIT_HOST_CONNECT_TIMEOUT=30
    build: 
      context: ./Broidery
      dockerfile: ./Dockerfile
      network: broidery-stack_overlay
    container_name: broidery-backend
    hostname: broidery-backend
    image: broidery-backend
    restart: always
    ports:
      - '5000:5000'
    expose:
      - '5000'
    networks:
      - overlay
 
  broidery-frontend: 
    container_name: broidery-frontend
    hostname: broidery-frontend
    image: broidery-frontend
    build:
      context: ./Broidery-frontend
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - '81:80'
    expose: 
      - '81'
    networks:
      - overlay
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/conf.d/default.conf"
      - "./nginx/nginx.conf.general:/etc/nginx/nginx.conf"
networks:
  overlay:
